<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Gorgonia</title><link>https://gorgonia.org/fr/</link><description>Recent content on Gorgonia</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><lastBuildDate>Tue, 29 Oct 2019 14:59:59 +0100</lastBuildDate><atom:link href="https://gorgonia.org/fr/index.xml" rel="self" type="application/rss+xml"/><item><title>Graph / Exprgraph</title><link>https://gorgonia.org/fr/reference/exprgraph/</link><pubDate>Tue, 29 Oct 2019 19:49:05 +0100</pubDate><guid>https://gorgonia.org/fr/reference/exprgraph/</guid><description>Beaucoup de choses ont été dites sur les graphes de calcul ou sur les graphes d&amp;rsquo;expression. Mais qu&amp;rsquo;est-ce donc en fait? Considérez les comme des AST (arbres d&amp;rsquo;expression syntaxique) pour l&amp;rsquo;expression de façon mathématique de ce que vous voulez. Voici pour exemple un graphe (mais avec un vecteur et une addition scalaire à la place):
Gorgonia permet de présenter les capacités avec un graphe agréable. Voici par exemple le graphe de l&amp;rsquo;équation $y = x^2$ et sa dérivation:</description></item><item><title>Hello World</title><link>https://gorgonia.org/fr/tutorials/hello-world/</link><pubDate>Tue, 29 Oct 2019 17:54:31 +0100</pubDate><guid>https://gorgonia.org/fr/tutorials/hello-world/</guid><description>Ceci est un tutoriel étape par étape pour réaliser des oprations très simples avec Gorgonia.
Notre objectif est d&amp;rsquo;utiliser toute la mécanique de Gorgonia pour réaliser une opération très simple :
$ f(x,y) = x + y $
avec x = 2 et y = 5
Comment ça marche ? L&amp;rsquo;équation x + y = z peut être représentée graphiquement :
graph LR; z[z] -- add(Round edge) add[+] -- x add[+] -- y Pour en obtenir le résultat, nous avons besoin de 4 étapes :</description></item><item><title>Résoudre des problèmes de GPU</title><link>https://gorgonia.org/fr/how-to/troubleshoot-gpu-issues/</link><pubDate>Fri, 17 Jul 2020 06:24:26 +1000</pubDate><guid>https://gorgonia.org/fr/how-to/troubleshoot-gpu-issues/</guid><description>Ce document est une liste de conseils en cas de problème. Si vous rencontrez des difficultés en utilisant des GPUs, ce document devrait pouvoir vous aider.
Le package cu fonctionne avec une application appelée cudatest qui devrait être utile pour résoudre des problèmes.
Pour installer cudatest, lancez :
go install gorgonia.org/cu/cmd/cudatest Cela implique que vous ayez déjà installé CUDA, et cuDNN.
Erreur d&amp;rsquo;initalisation avec plusieurs GPUs Si vous utilisez plusieurs GPUs, vous pourriez tomber sur un message qui ressemble à ce qui suit :</description></item><item><title>Language dédié et glossaire</title><link>https://gorgonia.org/fr/getting-started/ubiquitous-language/</link><pubDate>Wed, 05 Feb 2020 16:45:51 +0100</pubDate><guid>https://gorgonia.org/fr/getting-started/ubiquitous-language/</guid><description>Cette page contient diverses définitions et un glossaire vous permettant de comprendre Gorgonia et de communiquer avec l&amp;rsquo;équipe (via PR ou issues).
Tenseurs inner(most) dimension(s) (dimensions intérieures (maximales))- pour une forme donnée, les dimensions intérieures tendent vers la droite. Par exemple, dans une forme (2,3,4), les dimensions intérieures sont (3, 4). La dimension intérieure maximale est 4. outer(most) dimension(s) (dimensions exérieures (maximales))- Pour une forme donnée, les dimensions extérieures tendent vers la gauche.</description></item><item><title>Commencer à contribuer à la documentation</title><link>https://gorgonia.org/fr/getting-started/contributing-doc/</link><pubDate>Fri, 31 Jan 2020 14:59:03 +0100</pubDate><guid>https://gorgonia.org/fr/getting-started/contributing-doc/</guid><description>Si vous souhaitez commencer à contribuer à la documentation de Gorgonia, cette page et ses points liés peuvent vous aider. Pas besoin d&amp;rsquo;être un développeur ou un rédacteur technique pour avoir un grand impact sur la documentation de Gorgonia et l&amp;rsquo;expérience utilisateur ! Pour les points de cette page, il vous suffit d&amp;rsquo;avoir un compte GitHub et un navigateur internet.
Si vous cherchez des informations sur comment contribuer aux dépôts de code de Gorgonia, consultez les directives de contribution.</description></item><item><title>Dessiner le ExprGraph avec Graphviz (dot)</title><link>https://gorgonia.org/fr/how-to/dot/</link><pubDate>Sun, 01 Dec 2019 10:14:55 +0100</pubDate><guid>https://gorgonia.org/fr/how-to/dot/</guid><description>Le package encoding de Gorgonia contient une fonction permettant de déployer le ExprGraph en dot language.
Cela permet d&amp;rsquo;utiliser le programme graphviz pour générer des versions png ou svg du graphique.
Une manière simple de le faire :
package main import ( &amp;#34;fmt&amp;#34; &amp;#34;log&amp;#34; &amp;#34;gorgonia.org/gorgonia&amp;#34; &amp;#34;gorgonia.org/gorgonia/encoding/dot&amp;#34; ) func main() { g := gorgonia.NewGraph() var x, y *gorgonia.Node // define the expression x = gorgonia.NewScalar(g, gorgonia.Float64, gorgonia.WithName(&amp;#34;x&amp;#34;)) y = gorgonia.NewScalar(g, gorgonia.</description></item><item><title>Régression linéaire multivariée sur le dataset Iris</title><link>https://gorgonia.org/fr/tutorials/iris/</link><pubDate>Thu, 31 Oct 2019 14:53:37 +0100</pubDate><guid>https://gorgonia.org/fr/tutorials/iris/</guid><description>A propos Nous allons utiliser Gorgonia pour créer un modèle de régression linéaire.
Le but de ce tutoriel est de prédire l&amp;rsquo;espèce d&amp;rsquo;une fleur en fonction de ses caractéristiques:
sepal_length // longueur du sépale sepal_width // largeur du sépale petal_length // longueur du pétale petal_width // largeurdu pétale Les espèces que nous voulons prédire sont:
setosa virginica versicolor Le but de ce tutoriel est de programmer Gorgonia pour qu&amp;rsquo;il trouve seul les paramètres qui permettent de déterminer la relation entre les attributs et le spécimen.</description></item><item><title>Créer un tensor depuis un Dataframe (gota)</title><link>https://gorgonia.org/fr/how-to/dataframe/</link><pubDate>Wed, 30 Oct 2019 22:57:09 +0100</pubDate><guid>https://gorgonia.org/fr/how-to/dataframe/</guid><description>Cet article explique comment créer un tenseur depuis un dataframe en utilisant le package gota.
Le but est de lire un fichier csv et de créer un objet *tensor.Dense de forme (2,2).
Creation du dataframe depuis le fichier csv Considerons un ficier csv avec le contenu suivant:
sepal_length,sepal_width,petal_length,petal_width,species 5.1 ,3.5 ,1.4 ,0.2 ,setosa 4.9 ,3.0 ,1.4 ,0.2 ,setosa 4.7 ,3.2 ,1.3 ,0.2 ,setosa 4.6 ,3.1 ,1.5 ,0.2 ,setosa 5.0 ,3.</description></item><item><title>Sauver les matrices de poids</title><link>https://gorgonia.org/fr/how-to/save-weights/</link><pubDate>Tue, 29 Oct 2019 20:07:16 +0100</pubDate><guid>https://gorgonia.org/fr/how-to/save-weights/</guid><description>But Le but de cet article est de décrire la façon de sauvegarder les valeurs des noeuds values et de les restaurer.
Implementation La meilleure chose à faire de suite est de de sauvegarder la valeur des noeuds correspondants et de les restaurer.
Les tenseurs remplissent les contrats d&amp;rsquo;interface GobEncode et GobDecode, ce qui représente la meilleure option. On peut aussi sauvegarder le tableau d&amp;rsquo;éléments sous-jascent au tenseur, mais c&amp;rsquo;est un peu plus complexe.</description></item><item><title>Comment calculer le gradient (dérivation)</title><link>https://gorgonia.org/fr/how-to/autodiff/</link><pubDate>Tue, 29 Oct 2019 20:07:07 +0100</pubDate><guid>https://gorgonia.org/fr/how-to/autodiff/</guid><description>Objectif Prenez cette équation simple :
$$ f(x,y,z) = ( x + y ) \times z $$
L&amp;rsquo;objectif de cet article est de vous montrer comment Gorgonia peut évaluer le gradient $\nabla f$ avec ses dérivées partielles :
$$ \nabla f = [\frac{\partial f}{\partial x}, \frac{\partial f}{\partial y}, \frac{\partial f}{\partial z}] $$
Explication En utilisant la règle de dérivation d&amp;rsquo;une fonction composée, on peut obtenir la valeur du gradient à chaque étape comme démontré ici :</description></item><item><title>Go Machine</title><link>https://gorgonia.org/fr/reference/vm/gomachine/</link><pubDate>Tue, 29 Oct 2019 19:50:15 +0100</pubDate><guid>https://gorgonia.org/fr/reference/vm/gomachine/</guid><description>Cette page explique la tuyauterie à l&amp;rsquo;intérieur de la Go Machine.
GoMachine est une fonctionnalité expérimentale contenue dans le package xvm. L&amp;rsquo;API du package et son nom pourraient changer. Ce document s&amp;rsquo;appuie sur le commit 7538ab3
Les états des noeuds Le principe repose sur les états des noeuds.
Comme expliqué dans la vidéo Lexical Scanning in Go:
un état représente où nous sommes une action représente ce que nous faisons les actions activent un nouvel état A ce jour, la GoMachine attend d&amp;rsquo;un noeud d&amp;rsquo;être dans ces divers états:</description></item></channel></rss>